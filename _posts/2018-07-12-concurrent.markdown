---
layout: post
title:  "多线程一定快吗？-上下文切换"
date:   2018-07-12 23:00:00 +0800
categories: 并发
---
### 多线程的实质		
CPU通过给每个线程分配CPU时间片来实现多线程执行代码。时间片是CPU分配给各个线程的工作的时间，因为时间片非常短，所以CPU通过不停地切换线程执行，让我们感觉多个线程是同时执行的，时间片一般是几十毫秒。    
### 上下文切换	
CPU通过时间片分配算法来循环执行任务，当前任务执行完一个时间片后会切换到下一个任务并且保存当前任务状态。下次切换回这个任务时，从保存的状态开始执行。对于某个任务来说，从一个时间片的结束，到下个时间片的开始，就是一次上下文切换。上下文切换是有开销的，会影响多线程的执行速度。
### 多线程一定比串行快吗？	
前面有说到，上下文切换对于系统来说是有开销的，所以，当上下文切换的开销大于多线程节省的时间，那么耗时就会大于串行。这个可以写个测试用例测一下。
### 减少上下文切换	
1. 无锁并发编程。多线程竞争锁时，会引起上下文的切换，所以，考虑多线程不使用锁，比如不同线程处理的数据没有交集，则不需要有锁。
2. CAS算法，compare and set。
3. 使用最少线程。评估线程数，要合理，不要过多。线程过多就会有比较多的线程是WAITING状态。
4. 协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。
### 减少上下文切换实战
jstack命令可以dump当前的所有线程，以及状态。查看WAITING状态的线程主要是哪些，分析原因，还可以像办法优化。因为线程从WAITING到RUNNABLE需要一次上下文切换。